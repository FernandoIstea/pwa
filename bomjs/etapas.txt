# CONECTIVIDAD A INTERNET (INDEX.HTML)
## ¿Estoy conectado?
### CREAR EL ARCHIVO CONECTIVIDAD.JS Y MOVER EL SCRIPT DEL DOC HTML A ESTE NUEVO ARCHIVO

    function guardarEnLS() {
        const datosFormulario = {
            nombre: inputNombre.value,
            email: inputEmail.value,
            fecha: inputFecha.value,
            comentarios: inputCom.value 
        }
        console.log("Datos almacenados en LocalStorage.")
        localStorage.setItem("DatosDeFormulario", JSON.stringify(datosFormulario))
    }

    function recuperarDeLS() {
        if (localStorage.getItem("DatosDeFormulario")) {
            const datosFormulario = JSON.parse(localStorage.getItem("DatosDeFormulario"))
                  inputNombre.value = datosFormulario.nombre 
                  inputEmail.value = datosFormulario.email
                  inputFecha.value = datosFormulario.fecha 
                  inputCom.value = datosFormulario.comentarios            
        }
    }

    window.addEventListener("online", ()=> {
        console.log("Estamos online! 🛜")
        btnEnviar.disabled = false 
    })
    
    window.addEventListener("offline", ()=> {
        console.error("Se perdió la conexión a la red. ⛔️")
        btnEnviar.disabled = true 
        guardarEnLS()
    })

// ################################################################################################
# VELOCIDAD DE CONEXIÓN (NAVIGATOR.HTML)
## Detectar la velocidad de conexión y enviar contenido acorde

    function mostrarDatosConexion() {
        const n = navigator.connection

            downlink.textContent = n.downlink
            effType.textContent = n.effectiveType
            type.textContent = n.type
            saveData.textContent = n.saveData
    }

    // Crear el tag VIDEO y el paragraph asociado en el documento HTML
    <p id="videoFilename">Aquí veremos el nombre del video.</p>
    <video src="" id="video" controls></video>

    // Crear la función que selecciona la calidad de video a cargar
    function cargarVideo() {
        const n = navigator.connection
        const video = document.querySelector("#video")
        const videoFilename = document.querySelector("#videoFilename")

        const videoClip = {
                UHD: 'media/techvideo-UHD.mp4',
                HD: 'media/techvideo-HD.mp4',
                SD: 'media/techvideo-SD.mp4'
        }

        switch(n.effectiveType) {
            case '4g':
                video.src = videoClip.UHD
                break
            case '3g':
                video.src = videoClip.HD
                break
            case '2g':
                video.src = videoClip.SD
                break
            default:
                video.src = videoClip.SD
        }

        videoFilename.textContent = video.src
    }
    cargarVideo()

// ################################################################################################
# HARDWARE DE USUARIO (HARDWARE.HTML)
## Detectar el hardware del usuario, sistema operativo, navegador, tipo de dispositivo, etc.

    try {
        procesadores.textContent = navigator.hardwareConcurrency || "N/A"
        memoria.textContent = navigator?.deviceMemory || "N/A"
        if (navigator.userAgentData?.mobile) {
            so.textContent = navigator.userAgentData.platform
        } else {
            so.textContent = navigator.platform
        }
        idioma.textContent = navigator.language || "N/A"
        mtp.textContent = navigator.maxTouchPoints || "N/A"
    } catch (error) {
        alert(error.message)
    }

// ################################################################################################
# HARDWARE DE USUARIO (HARDWARE.HTML)
## Detectar el nivel de la batería del usuario

    navigator.getBattery()
        .then((resultado)=> {
            console.table(resultado)
            nivel.textContent = parseFloat(resultado.level * 100).toFixed(2)
            cargando.textContent = resultado.charging 
        })

// ################################################################################################
# GEOLOCALIZACIÓN DE USUARIO (MAPAS.HTML)
## Detectar la ubicación del usuario mediante el sensor de GPS 

    function geolocalizar() {
        const opciones = {enableHighAccuracy: true, timeout: 15000, maximumAge: 0}
        navigator.geolocation.getCurrentPosition(success, error, opciones)
    }
    geolocalizar()

    function success(position) {
        const coords = position.coords

            latitud.textContent = coords.latitude
            longitud.textContent = coords.longitude
            precision.textContent = coords.accuracy

    }

    function error(err) {
        const mensajeError = `Error: ${err.code} - ${err.message}`
        // console.log(mensajeError)
        alert(mensajeError)
    }